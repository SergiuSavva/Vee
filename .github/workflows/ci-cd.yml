name: Continuous Integration and Continuous Deployment

on:
  push:
    branches:
      - test1
#      - develop
#      - release/*
#      - main
  pull_request:
    types:
      - opened
      - reopened
    branches:
      - develop

env:
  AWS_ECR_REGION: eu-west-1
  AWS_EKS_REGION: us-east-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  # Build step
  build:
    name: Build, tag, and push image to Amazon ECR
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.3.3

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          GH_PR: ${{ github.event.number }}
        run: |
          cd scripts
          ./build.sh pr$GH_PR


  # Deployment step
  deploy:
    name: deploy to cluster
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_EKS_REGION }}

      - name: helm deploy
        uses: docker://alpine/k8s:1.22.10
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          IMAGE_TAG: ${{ github.sha }}
          GH_PR: ${{ github.event.number }}
        with:
          entrypoint: /bin/bash
          args: IaC/deploy.sh pr$GH_PR

#      - name: Get URL
#        id: url
#        uses: koslib/helm-eks-action@master
#        env:
#          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#        with:
#          command: kubectl get svc my_svc -o json | jq -r '.status.loadBalancer.ingress[0].hostname'
#
#      - name: Print Response
#        run: echo "Response was ${{ steps.url.outputs.response }}"
